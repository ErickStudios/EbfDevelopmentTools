/**
* Mathlib.heasm
*
* el codigo fuente de Mathlib.dll
*/

//
// indicar que es un 'MyPackage' y compilarlo en vez de con el encabezado EA compilarlo con el encabezado MP
//
_Use EbfDLLSpec

%include
    lib/ebf.heasm

/**
* MathOperationType
*
* el tipo de operacion
*/
ENUM MathOperationType

    /**
    * _MathOperationType_ABS_
    *
    * operacion absolute value
    */
    _EnumMember _MathOperationType_ABS_ 0

END ENUM

/**
* _Operator1_
*
* el operador 1
*/
LET _Operator1_

/**
* _Operator2_
*
* el operador 2
*/
LET _Operator2_

/**
* _GetDllParams_
*
* obtiene los parametros de la dll
*/
FUNCTION _GetDllParams_
    _IProto()

/**
* _ABS_
*
* operacion abs
*/
FUNCTION _ABS_
    _IProto()

/**
* _ABSConvertToPositive_
*
* convertir a positivo
*/
FUNCTION _ABSConvertToPositive_
    _IProto()

//
// main
//

call _GetDllParams_

SetVar 2 _MathOperationType_ABS_

//
// ABS
//
// convierte cualquier numero a positivo
//
IF DllIO.ReasonForCall|==|2 THEN _GetDllParams_

// detener la dll
_CallOut 0 0

FUNCTION _GetDllParams_

    SetVar 2 0
    call_tapot GetArrayItem DllIO.Params 2 _Operator1_
    SetVar 2 1
    call_tapot GetArrayItem DllIO.Params 2 _Operator2_

    __asm ret

FUNCTION _ABS_

    SetVar 9 0
    call_tapot CmpAndJump _Operator1_ 9 _ComparatorType_IfNotGreater_ _ABSConvertToPositive_ 1

    DllIO.ReturnValue = *_Operator1_

    __asm ret

FUNCTION _ABSConvertToPositive_

    (LET*)1 = -1
    _Math _Operator1_ * 1

    __asm ret