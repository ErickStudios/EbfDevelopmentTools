/**
* ebf.heasm
*
* archivo principal de ErickBinaryFormat para KellyBootloader
* [Manual de uso](https://github.com/ErickStudios/EbfDevelopmentTools/blob/main/LibDoc.md#bienvenido-a-la-documentacion-de-ebfdevelopmenttools)
*/

_Use ASCII

//
// saltarse todas las funciones
//

call __Entry__
_CallOut 0 0

// --------------------------------
//
// librerias del direccionamiento
// automatico de lets y su control
//
// --------------------------------

%include
    lib/mem/Optimization.heasm

%include
    lib/mem/Pointers.heasm
    
%include
    lib/mem/ExtendedRam.heasm

// --------------------------------
//
// librerias para interactuar 
// con el entorno
//
// --------------------------------

%include
    lib/env/Errno.heasm

%include
    lib/env/Pci.heasm

%include
    lib/env/Ports.heasm

%include
    lib/env/ShellApi.heasm

%include
    lib/env/Arch.heasm

%include
    lib/env/File.heasm

// --------------------------------
//
// librerias para manejar arrays y
// codigos en la ram
//
// --------------------------------

%include
    lib/pools/Array.heasm

%include
    lib/pools/RamCode.heasm

// --------------------------------
//
// librerias para ayudar a los 
// usuarios principiantes
//
// --------------------------------

%include
    lib/def/Structs.heasm

%include
    lib/def/Helpers.heasm

// --------------------------------
//
// especificacion de ErickBinaryFormat
// y de la libreria
//
// --------------------------------

%include
    lib/specification/Dll.heasm

%include
    lib/specification/Stack.heasm

// --------------------------------
//
// librerias de alto nivel
//
// --------------------------------

%include
    lib/Misc/io.heasm

%include
    lib/Misc/Boolean.heasm

%include
    lib/Misc/System.heasm

%include
    lib/Misc/Random.heasm

/**
* __Entry__
*
* para saltarse todas las librerias y no ejecutar codigo a menos que se llame
*/
FUNCTION __Entry__

    // para evitar bugs
    _EbfNullPtr_ = 0

    // obtener la direccion que es 2999
    _SystemInfo_ = 29
    (LET*)1 = 10
    _Math _SystemInfo_ * 1
    (LET*)1 = 9
    _Math _SystemInfo_ + 1
    (LET*)1 = 10
    _Math _SystemInfo_ * 1
    (LET*)1 = 9
    _Math _SystemInfo_ + 1
    
    _SystemInfo_ = **_SystemInfo_

    // obtener la direccion al errno
    _Errno_ = 2
    (LET*)1 = 10
    _Math _Errno_ * 1
    // 20
    (LET*)1 = 5
    _Math _Errno_ + 1
    // 25
    (LET*)1 = 10
    _Math _Errno_ * 1
    // 250
    (LET*)1 = 6
    _Math _Errno_ + 1
    // 256
    (LET*)1 = 2
    _Math _Errno_ * 1
    // 512

    // obtener la arquitectura actual
    _CallOut 61 _ActualArch_

    // al unirlo con el archivo aqui continua lo demas del programa