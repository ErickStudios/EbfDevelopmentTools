/**
* ParamsAppStrange1.heasm
*
* una funcion que imprime varios mensajes culturales de la programacion dependiendo del parametro
*
* tambien tiene comandos especiales como
*   --?: ver un mensaje de informacion
*
* outpud esperado:
*
* de documentacion
*
*   ```KellyBootloaderOutpud
*
*   KellyBootloader> ./ParamsAppStrange1.ebf --?
*   sintaxis:
*       ./ParamsAppStrange1.ebf [PhraseId:LET/Command:Array]
*       [PhraseID : LET] el numero de frase
*       [Command : Array] el comando
*
*   comandos:
*       --?: ver esta guia
*   
*   KellyBootloader>       
*
*   ```
*
* de uso:
*
*   ```KellyBootloaderOutpud
*
*   KellyBootloader> ./ParamsAppStrange1.ebf 1
*   hello world
*
*   KellyBootloader> ./ParamsAppStrange1.ebf 2
*   foo bar
*
*   KellyBootloader> ./ParamsAppStrange1.ebf 3
*   apple banana
*
*   ```
*
* esto sin usar ningun stdlib por que no hay
* edit: YA TENEMOS UN STDLIB EXCLUSIVO PARA KELLYBOOTLOADER PUROOOO YAAAYAYYY!!!
*/

%include
    lib/ebf.heasm

//
// activar el modo de superar las limitaciones de CHAR8
//

_Use ASCII

//
// configurar variables
//

LET _PhraseID_
LET _Command_
LET _Index_

//
// configurar algunas cosas que facilitan todo
//

swinc Relacionable
{
    autv Numero::LET;
    autv Mensaje::Array;
}

Array __ParametrosRelacionables__ AllocatePool->3

autopbus __ParametrosRelacionables1Struct__::swinc Relacionable
Array __ParametrosRelacionables1__ AllocatePool->11
// +- hello world

autopbus __ParametrosRelacionables2Struct__::swinc Relacionable
Array __ParametrosRelacionables2__ AllocatePool->7
// +- foo bar

autopbus __ParametrosRelacionables3Struct__::swinc Relacionable
Array __ParametrosRelacionables3__ AllocatePool->12
// +- apple banana

//
// comandos
//

Array _DocumentationCommand_ AllocatePool->4

//
// ir a la funcion principal
//

call __Principal

/**
* __Documentation
*
* muestra la documentacion del programa
*/
FUNCTION __Documentation

    Print "sintaxis:\n"

    Print "\s\s\s\s./ParamsAppStrange1.ebf\s[PhraseId:LET/Command:Array]\n"
    Print "\s\s\s\s[PhraseID\s:\sLET]\sel\snumero\sde\sfrase\n"
    Print "\s\s\s\s[Command\s:\sArray]\sel\scomando\n\n"

    Print "comandos:\n"
    Print "\s\s\s\s--?:\sver\sesta\sguia\n"

    _CallOut 0 0

/**
* __InicializarTodo
*
* inicializa todo
*/
FUNCTION __InicializarTodo

    //
    // incializar los comandos
    //

    _DocumentationCommand_ [0] '-'
    _DocumentationCommand_ [1] '-'
    _DocumentationCommand_ [2] '?'
    _DocumentationCommand_ [3] 0

    //
    // empezar con el hello world
    //

    __ParametrosRelacionables1__ [0] 'h'
    __ParametrosRelacionables1__ [1] 'e'
    __ParametrosRelacionables1__ [2] 'l'
    __ParametrosRelacionables1__ [3] 'l'
    __ParametrosRelacionables1__ [4] 'o'
    __ParametrosRelacionables1__ [5] '\s'
    __ParametrosRelacionables1__ [6] 'w'
    __ParametrosRelacionables1__ [7] 'o'
    __ParametrosRelacionables1__ [8] 'r'
    __ParametrosRelacionables1__ [9] 'l'
    __ParametrosRelacionables1__ [10] 'd'

    //
    // foo bar
    //

    __ParametrosRelacionables2__ [0] 'f'
    __ParametrosRelacionables2__ [1] 'o'
    __ParametrosRelacionables2__ [2] 'o'
    __ParametrosRelacionables2__ [3] '\s'
    __ParametrosRelacionables2__ [4] 'b'
    __ParametrosRelacionables2__ [5] 'a'
    __ParametrosRelacionables2__ [6] 'r'

    //
    // apple banana
    //

    __ParametrosRelacionables3__ [0] 'a'
    __ParametrosRelacionables3__ [1] 'p'
    __ParametrosRelacionables3__ [2] 'p'
    __ParametrosRelacionables3__ [3] 'l'
    __ParametrosRelacionables3__ [4] 'e'
    __ParametrosRelacionables3__ [5] '\s'
    __ParametrosRelacionables3__ [6] 'b'
    __ParametrosRelacionables3__ [7] 'a'
    __ParametrosRelacionables3__ [8] 'n'
    __ParametrosRelacionables3__ [9] 'a'
    __ParametrosRelacionables3__ [10] 'n'
    __ParametrosRelacionables3__ [11] 'a'

    //
    // inicializar las estructuras
    //

    __ParametrosRelacionables1Struct__.Numero = 1
    __ParametrosRelacionables1Struct__.Mensaje = *__ParametrosRelacionables1__

    __ParametrosRelacionables2Struct__.Numero = 2
    __ParametrosRelacionables2Struct__.Mensaje = *__ParametrosRelacionables2__

    __ParametrosRelacionables3Struct__.Numero = 3
    __ParametrosRelacionables3Struct__.Mensaje = *__ParametrosRelacionables3__

    //
    // inicializar el array principal
    //

    __ParametrosRelacionables__ [0] __ParametrosRelacionables1Struct__.Numero

    __ParametrosRelacionables__ [1] __ParametrosRelacionables2Struct__.Numero

    __ParametrosRelacionables__ [2] __ParametrosRelacionables3Struct__.Numero

    __asm ret

/**
* __Encontrado
*
* si fue encontrado
*/
FUNCTION __Encontrado

    _CallOut 22 65

    __asm ret

/**
* __Relacionar
*
* relaciona cada palabra
*/
FUNCTION __Relacionar

    //Print "Index:\s"
   // _CallOut 18 _Index_

    //Print "\sId:\s"
    
    call_tapot GetArrayItem __ParametrosRelacionables__ _Index_ 3
    // +- obtener el item del array

    __asm set_value_with_value_of_value 2,3

    SetVarWithValue 64 2

    //_CallOut 18 2

    //Print "\sMessagePtr:\s"

    SetVarWithValue 2 3

    __asm increment 2

    __asm set_value_with_value_of_value 2,2

    SetVarWithValue 65 2

    //_CallOut 18 2
    //Print "\n"

    //
    // obtener la estructura
    //

    SetVarWithValue 7 64
    SetVarWithValue 8 _PhraseID_

    _CallOut 39 7

    SetVar 4 0
    SetVar 5 __Encontrado
    SetVar 6 0

    _CallOut 40 4

    __asm increment _Index_

    SetVarWithValue 7 _Index_
    SetVarWithValue 8 _LongitudDelArray_

    _CallOut 39 7

    SetVar 4 2
    SetVar 5 __Relacionar
    SetVar 6 0

    _CallOut 40 4

    __asm ret

/**
* __Principal
*
* funcion principal del programa
*/
FUNCTION __Principal

    _PhraseID_ = 0

    call_tapot GetParam 0 _Command_

    1 = _PhraseID_
    2 = *_Command_

    // intentar convertir el string a numero
    _CallOut 41 1

    //Print "Param:\s"

    //_CallOut 22 _Command_

    //Print "\n"

    call __InicializarTodo

    IF BufferCmp<_Command_,_DocumentationCommand_> THEN __Documentation

    LET _LongitudDelArray_

    call_tapot GetArrayLength __ParametrosRelacionables__ _LongitudDelArray_

    //Print "Array\sLength:\s"
    //_CallOut 18 _LongitudDelArray_

    //Print "\n"

    _Index_ = 0
    call __Relacionar

    call __LiberarTodo

    _CallOut 0 0

/**
* __LiberarTodo
*
* pues hace eso liberar toda la ram que se creo para reutilizarla en el futuro por otro programa
*/
FUNCTION __LiberarTodo

    //
    // liberar lo principal
    //

    FreePool __ParametrosRelacionables__

    //
    // liberar lo secundario
    //

    FreePool __ParametrosRelacionables1__
    FreePool __ParametrosRelacionables2__
    FreePool __ParametrosRelacionables3__

    //
    // liberar los comandos
    //

    FreePool _DocumentationCommand_

    __asm ret