/**
* boot.heaam
*
* cargador de arranque para BasOS
*/

%include
    Tests/BasOS/Headers/BasOS.heasm

/**
* _PutMvOn_
*
* donde pondra la variable
*/
LET _PutMvOn_

/**
* _DoRunCm_
*
* si hace un runcm
*/
FUNCTION _DoRunCm_
    _IProto()

/**
* _DoCat_
*
* si hace un cat
*/
FUNCTION _DoCat_
    _IProto()

/**
* _DoClear_
*
* si hace un clear
*/
FUNCTION _DoClear_
    _IProto()

/**
* _DoEcho_
*
* si se hace un echo
*/
FUNCTION _DoEcho_
    _IProto()

/**
* _DoGuide_
*
* si hace un ?
*/
FUNCTION _DoGuide_
    _IProto()

/**
* _DoReset_
*
* si se hace un reboot
*/
FUNCTION _DoReset_
    _IProto()

/**
* _DoOff_
*
* si se hace un shutdown
*/
FUNCTION _DoOff_
    _IProto()

/**
* _DoMall_
*
* si se hace un mall
*/
FUNCTION _DoMall_
    _IProto()

/**
* _DoStra_
*
* si se hace un stra
*/
FUNCTION _DoStra_
    _IProto()

/**
* _DoSetv_
*
* si se hace un setv
*/
FUNCTION _DoSetv_
    _IProto()

/**
* _DoBegin_
*
* si se hace un begin
*/
FUNCTION _DoBegin_
    _IProto()

/**
* _DoEnd_
*
* si se hace un end
*/
FUNCTION _DoEnd_
    _IProto()

/**
* _DoPrint_
*
* si se hace un print
*/
FUNCTION _DoPrint_
    _IProto()

/**
* _DoPrtxt_
*
* si se hace un prtxt
*/
FUNCTION _DoPrtxt_
    _IProto()

/**
* _DoFrst_
*
* si se hace un frst
*/
FUNCTION _DoFrst_
    _IProto()

/**
* _DoPoenv_
*
* si se hace un poenv
*/
FUNCTION _DoPoenv_
    _IProto()

/**
* _DoPuenv_
*
* si se hace un puenv
*/
FUNCTION _DoPuenv_
    _IProto()

/**
* _DoPopc_
*
* si se hace un popc
*/
FUNCTION _DoPopc_
    _IProto()

/**
* _DoPupc_
*
* si se hace un pupc
*/
FUNCTION _DoPupc_
    _IProto()

/**
* _DoStpf_
*
* si se hace un stpf
*/
FUNCTION _DoStpf_
    _IProto()

/**
* _DoClpf_
*
* si se hace un clpf
*/
FUNCTION _DoClpf_
    _IProto()

/**
* _DoSrc_
*
* si se hace un src
*/
FUNCTION _DoSrc_
    _IProto()

/**
* ExecuteCommand
*
* ejecuta un comando
* @param Line es la linea
*/
tapot ExecuteCommand (
    _Linea_::String
)
    _Line_ = *_Linea_

    call _ExCommand_

END tapot

FUNCTION _ExCommand_

    // comparar los comandos

    call_tapot GetArrayLength _Line_ 2

    (LET*)1 = 0
    call_tapot CmpAndJump 1 2 _ComparatorType_IfEqual_ _hlt_ 0

    // runcn
    IF BufferNCmp<_Line_,_RuncmCommand_,5> THEN _DoRunCm_

    // cat
    IF BufferNCmp<_Line_,_CatCommand_,3> THEN _DoCat_

    // echo
    IF BufferNCmp<_Line_,_EchoCommand_,4> THEN _DoEcho_

    // clear
    IF BufferCmp<_Line_,_ClearCommand_> THEN _DoClear_

    // guide
    IF BufferCmp<_Line_,_GuideCommand_> THEN _DoGuide_

    // reboot
    IF BufferCmp<_Line_,_RebootCommand_> THEN _DoReset_

    // shutdown
    IF BufferCmp<_Line_,_ShutdownCommand_> THEN _DoOff_

    // mall
    IF BufferNCmp<_Line_,_AllocationCommand_,4> THEN _DoMall_

    // rese
    IF BufferNCmp<_Line_,_ReseCommand_,4> THEN _DoRese_

    // src
    IF BufferNCmp<_Line_,_SrcCommand_,3> THEN _DoSrc_

    // stra
    IF BufferNCmp<_Line_,_StrAllocCommand_,4> THEN _DoStra_

    // frst
    IF BufferNCmp<_Line_,_FreeStrCommand_,4> THEN _DoFrst_

    // print
    IF BufferNCmp<_Line_,_WriteVarStrCommand_,5> THEN _DoPrint_

    // prtxt
    IF BufferNCmp<_Line_,_WriteTextCommand_,5> THEN _DoPrtxt_

    // setv
    IF BufferNCmp<_Line_,_SetVariablePushCommand_,4> THEN _DoSetv_

    // begin
    IF BufferCmp<_Line_,_BeginProgramCommand_> THEN _DoBegin_

    // end
    IF BufferCmp<_Line_,_EndProgramCommand_> THEN _DoEnd_

    // popc
    IF BufferCmp<_Line_,_PopProgramCounterCommand_> THEN _DoPopc_

    // pupc
    IF BufferCmp<_Line_,_PushProgramCounterCommand_> THEN _DoPupc_

    // poenv
    IF BufferCmp<_Line_,_PopEnviorimentCommand_> THEN _DoPoenv_

    // puenv
    IF BufferCmp<_Line_,_PushEnviorimentCommand_> THEN _DoPuenv_

    // stpf
    IF BufferCmp<_Line_,_SetPopFlagCommand_> THEN _DoStpf_

    // clpf
    IF BufferCmp<_Line_,_ClearPopFlagCommand_> THEN _DoClpf_

    // #comentario
    IF BufferNCmp<_Line_,_CommentStart_,1> THEN _hlt_

    __asm ret

tapot ExecuteScriptFromFile (
    _FileName_::String
)

    // cargar el archivo a la ram
    call_tapot LoadFileToMem _FileName_

    _Script_ = *_FileName_

    //call_tapot PrintPool _Script_

    // ejecutarlo
    call _ExecuteScript_

    // liberar el pool del archivo
    //FreePool _FileName_

END tapot

FUNCTION _Main_

// no vamos a extraer nada de los servicios de arranque
call _IExitBS_

// ir al stack
_StackProgram_ = 1

// el script
Array _Script_ _YaLeTocaraXd_

// las lineas del script
Array _LinesOfScript_ _YaLeTocaraXd_

// el separador de lineas
Array _ScriptLineSplit_ AllocatePool->1

// lo que no queremos en el script
Array _CarrigeReturnChar_ AllocatePool->1

// la linea a ejecutar
LET _LineToExecute_

// no se ejecuta nada
_ScriptExecuting_ = 0

// separador de linea
_ScriptLineSplit_ [0] '\n'

// el caracter de retorno de carro
_CarrigeReturnChar_ [0] 13

// comentarios
_CommentStart_ [0] '#'

// para empezar
_GuideCommand_ [0] 'g'
_GuideCommand_ [1] 'u'
_GuideCommand_ [2] 'i'
_GuideCommand_ [3] 'd'
_GuideCommand_ [4] 'e'

// src
_SrcCommand_ [0] 's'
_SrcCommand_ [1] 'r'
_SrcCommand_ [2] 'c'

// cat
_CatCommand_ [0] 'c'
_CatCommand_ [1] 'a'
_CatCommand_ [2] 't'

// runcm
_RuncmCommand_ [0] 'r'
_RuncmCommand_ [1] 'u'
_RuncmCommand_ [2] 'n'
_RuncmCommand_ [3] 'c'
_RuncmCommand_ [4] 'm'

// clear
_ClearCommand_ [0] 'c'
_ClearCommand_ [1] 'l'
_ClearCommand_ [2] 'e'
_ClearCommand_ [3] 'a'
_ClearCommand_ [4] 'r'

// echo
_EchoCommand_ [0] 'e'
_EchoCommand_ [1] 'c'
_EchoCommand_ [2] 'h'
_EchoCommand_ [3] 'o'

// reboot
_RebootCommand_ [0] 'r'
_RebootCommand_ [1] 'e'
_RebootCommand_ [2] 'b'
_RebootCommand_ [3] 'o'
_RebootCommand_ [4] 'o'
_RebootCommand_ [5] 't'

// shutdown
_ShutdownCommand_ [0] 's'
_ShutdownCommand_ [1] 'h'
_ShutdownCommand_ [2] 'u'
_ShutdownCommand_ [3] 't'
_ShutdownCommand_ [4] 'd'
_ShutdownCommand_ [5] 'o'
_ShutdownCommand_ [6] 'w'
_ShutdownCommand_ [7] 'n'

// rese
_ReseCommand_ [0] 'r'
_ReseCommand_ [1] 'e'
_ReseCommand_ [2] 's'
_ReseCommand_ [3] 'e'

// mall
_AllocationCommand_ [0] 'm'
_AllocationCommand_ [1] 'a'
_AllocationCommand_ [2] 'l'
_AllocationCommand_ [3] 'l'

// stra
_StrAllocCommand_ [0] 's'
_StrAllocCommand_ [1] 't'
_StrAllocCommand_ [2] 'r'
_StrAllocCommand_ [3] 'a'

// print
_WriteVarStrCommand_ [0] 'p'
_WriteVarStrCommand_ [1] 'r'
_WriteVarStrCommand_ [2] 'i'
_WriteVarStrCommand_ [3] 'n'
_WriteVarStrCommand_ [4] 't'

// prtxt
_WriteTextCommand_ [0] 'p'
_WriteTextCommand_ [1] 'r'
_WriteTextCommand_ [2] 't'
_WriteTextCommand_ [3] 'x'
_WriteTextCommand_ [4] 't'

// frst
_FreeStrCommand_ [0] 'f'
_FreeStrCommand_ [1] 'r'
_FreeStrCommand_ [2] 's'
_FreeStrCommand_ [3] 't'

// setv
_SetVariablePushCommand_ [0] 's'
_SetVariablePushCommand_ [1] 'e'
_SetVariablePushCommand_ [2] 't'
_SetVariablePushCommand_ [3] 'v'

// begin
_BeginProgramCommand_ [0] 'b'
_BeginProgramCommand_ [1] 'e'
_BeginProgramCommand_ [2] 'g'
_BeginProgramCommand_ [3] 'i'
_BeginProgramCommand_ [4] 'n'

// end
_EndProgramCommand_ [0] 'e'
_EndProgramCommand_ [1] 'n'
_EndProgramCommand_ [2] 'd'

// pupc
_PushProgramCounterCommand_ [0] 'p'
_PushProgramCounterCommand_ [1] 'u'
_PushProgramCounterCommand_ [2] 'p'
_PushProgramCounterCommand_ [3] 'c'

// popc
_PopProgramCounterCommand_ [0] 'p'
_PopProgramCounterCommand_ [1] 'o'
_PopProgramCounterCommand_ [2] 'p'
_PopProgramCounterCommand_ [3] 'c'

// puenv
_PushEnviorimentCommand_ [0] 'p'
_PushEnviorimentCommand_ [1] 'u'
_PushEnviorimentCommand_ [2] 'e'
_PushEnviorimentCommand_ [3] 'n'
_PushEnviorimentCommand_ [4] 'v'

// poenv
_PopEnviorimentCommand_ [0] 'p'
_PopEnviorimentCommand_ [1] 'o'
_PopEnviorimentCommand_ [2] 'e'
_PopEnviorimentCommand_ [3] 'n'
_PopEnviorimentCommand_ [4] 'v'

// stpf
_SetPopFlagCommand_ [0] 's'
_SetPopFlagCommand_ [1] 't'
_SetPopFlagCommand_ [2] 'p'
_SetPopFlagCommand_ [3] 'f'

// clpf
_ClearPopFlagCommand_ [0] 'c'
_ClearPopFlagCommand_ [1] 'l'
_ClearPopFlagCommand_ [2] 'p'
_ClearPopFlagCommand_ [3] 'f'

// |
_OneLineSrcSeparator_ [0] '|'
call _Loop_

// funcion del bucle
FUNCTION _Loop_

    // dibujar el prompt
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "BasOS"
    (LET*)1 = _ConsoleColor_brightblue_
    call_tapot SetForegroundColor 1
    Print "^"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "#\s"

    // leer la linea
    _CallOut 23 _Line_
    Print "\n"

    _ScriptExecuting_ = 1

    call_tapot ExecuteCommand _Line_
    call_tapot SafeFreeArray _Line_
    _ScriptExecuting_ = 0

    // repetir el loop
    call_tapot CmpAndJump 1 2 _ComparatorType_JumpsAnyWays_ _Loop_ 0

    __asm ret

FUNCTION _hlt_

    __asm ret

FUNCTION _DoOff_

    _CallOut 27 0

    __asm ret

FUNCTION _DoReset_

    _CallOut 28 0

    __asm ret

FUNCTION _DoPopc_
    (LET*)1 = 0
    call_tapot GetVar 1 _LineToExecute_
    __asm ret
FUNCTION _DoPupc_
    (LET*)1 = 0
    call_tapot SetVar 1 2
    __asm ret

FUNCTION _DoRunCm_

    // recorrerlo 6 caracteres
    (LET*)1 = *_Line_
    (LET*)2 = 6

    _CallOut 33 1
    
    call_tapot ExecuteFile 1
    Print "\n"

    __asm ret

FUNCTION _DoSrc_

    // recorrerlo 6 caracteres
    (LET*)1 = *_Line_
    (LET*)2 = 4

    _CallOut 33 1
    
    _LineToExecute_ = 0

    call_tapot ExecuteScriptFromFile 1
    Print "\n"

    __asm ret

FUNCTION _DoPrint_

    // recorrerlo 6 caracteres
    (LET*)1 = *_Line_
    (LET*)2 = 6

    _CallOut 33 1

    (LET*)4 = *1
    
    // convertirlo a numero
    call_tapot Atoi 4 7
    // obtener string
    call_tapot GetVar 7 8
    // imrprimir el string
    call_tapot PrintPool 8

    __asm ret

FUNCTION _DoPrtxt_

    // recorrerlo 6 caracteres
    (LET*)1 = *_Line_
    (LET*)2 = 6

    _CallOut 33 1
    
    call_tapot PrintPool 1

    __asm ret

FUNCTION _DoStpf_
    (LET*)1 = 10
    (LET*)2 = 2
    call_tapot SetVar 1 2
    __asm ret

FUNCTION _DoClpf_
    (LET*)1 = 10
    (LET*)2 = 1
    call_tapot SetVar 1 2
    __asm ret

FUNCTION _DoEcho_

    // recorrerlo 7 caracteres
    (LET*)1 = *_Line_
    (LET*)2 = 5

    _CallOut 33 1
    
    call_tapot PrintPool 1

    Print "\n"

    __asm ret

FUNCTION _DoCat_

    // recorrerlo 6 caracteres
    (LET*)1 = *_Line_
    (LET*)2 = 4

    _CallOut 33 1
    
    // cargar el archivo a la ram
    call_tapot LoadFileToMem 1
    call_tapot PrintPool 1

    // liberar el pool del archivo
    FreePool 1
    Print "\n"

    __asm ret

FUNCTION _DoClear_

    _CallOut 2 0

    __asm ret

FUNCTION _DoRese_

    // recorrerlo 6 caracteres
    (LET*)4 = *_Line_
    (LET*)5 = 5

    _CallOut 33 4

    call_tapot Atoi 4 9
    (LET)9 = *9
    (LET)6 = 1

    call_tapot SetVar 9 6
    
    __asm ret

FUNCTION _DoSetv_

    // recorrerlo 6 caracteres
    (LET*)4 = *_Line_
    (LET*)5 = 5

    _CallOut 33 4

    // convertir a numero
    call_tapot Atoi 4 9

    // copiar la variable
    _PutMvOn_ = *9

    __asm ret

FUNCTION _DoStra_

    // recorrerlo 6 caracteres
    (LET*)4 = *_Line_
    (LET*)5 = 5

    _CallOut 33 4

    // clonar el string
    call_tapot ArrayClone 4 9

    // ponerlo en la variable indicada
    call_tapot SetVar _PutMvOn_ 9

    __asm ret

FUNCTION _DoFrst_
    __asm ret

/*
    // recorrerlo 6 caracteres
    (LET*)4 = *_Line_
    (LET*)5 = 5

    _CallOut 33 4

    // convertirlo a numero
    call_tapot Atoi 4 7
    // obtener string
    call_tapot GetVar 7 8
    // liberarlo
    FreePool 8

    __asm ret
*/

FUNCTION _DoMall_

    // recorrerlo 6 caracteres
    (LET*)4 = *_Line_
    (LET*)5 = 5

    _CallOut 33 4

    call_tapot Atoi 4 9
    _CallOut 18 9
    (LET)9 = *9
    (LET)6 = 1

    call_tapot SetVar 9 6
    
    call_tapot AllocateVar _AlloctedVarPos_
    call_tapot SetVar 9 _AlloctedVarPos_

    call_tapot GetVar 9 4

    _CallOut 18 4

    Print "\n"

    __asm ret

FUNCTION _DoGuide_

    // tipicos
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "Typicals\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "#\s\s\s\s\s\s\s\s\s\s\s[Comment]\n"
    Print "echo\s\s\s\s\s\s\s\s[Msg]\n"
    Print "mall\s\s\s\s\s\s\s\s[Id]\n"
    Print "rese\s\s\s\s\s\s\s\s[Id]\n"

    // manejo de archivos
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "File\sManagment\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "cat\s\s\s\s\s\s\s\s\s[Name]\n"
    Print "src\s\s\s\s\s\s\s\s\s[Name]\n"
    Print "runcm\s\s\s\s\s\s\s[Name]\n"

    // cadenas de texto
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "Strings\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "stra\s\s\s\s\s\s\s\s[String]\n"
    Print "print\s\s\s\s\s\s\s[VariableDirection]\n"
    Print "prtxt\s\s\s\s\s\s\s[String]\n"
    Print "frst\s\s\s\s\s\s\s\s[Direction]\n"

    // variables
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "Variables\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "setv\s\s\s\s\s\s\s\s[Direction]\n"

    // stack
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "Stack\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "begin\n"
    Print "end\n"

    // el recuperador de entorno
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "For\sfunctions\slibrerys\saddition\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "poenv\n"
    Print "puenv\n"

    // poder
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "Power\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "reboot\n"
    Print "shutdown\n"

    // guia y otros
    (LET*)1 = _ConsoleColor_brightgreen_
    call_tapot SetForegroundColor 1
    Print "Misc\n"
    (LET*)1 = _ConsoleColor_gray_
    call_tapot SetForegroundColor 1
    Print "guide\n"
    Print "clear\n"

    __asm ret

FUNCTION _DoPuenv_
    // guardar el script actual
    (LET*)7 = 12
    call_tapot SetVar 7 _LinesOfScript_
    // guardar la linea actual
    (LET*)7 = 13
    call_tapot SetVar 7 _LineToExecute_
    // nuevo stack
    call _DoBegin_
    __asm ret
FUNCTION _DoPoenv_
    // regresar al stack anterior
    call _DoEnd_
    // variable de las lineas
    (LET*)7 = 12
    call_tapot GetVar 7 _LinesOfScript_
    // variable de la linea actual
    (LET*)7 = 13
    call_tapot GetVar 7 _LineToExecute_
    // incrementar la linea para no ejecutar y "tropesar con la misma piedra"
    __asm increment _LineToExecute_
    __asm ret

FUNCTION _DoBegin_
    __asm increment _StackProgram_
    __asm ret
FUNCTION _DoEnd_
    __asm decrement _StackProgram_
    __asm ret

FUNCTION _ExecuteScript_

    call_tapot StrReplace _Script_ _CarrigeReturnChar_ _ScriptLineSplit_ _Script_
    //call_tapot StrReplace _Script_ _OneLineSrcSeparator_ _ScriptLineSplit_ _Script_

    //call_tapot PrintPool _Script_

    //call_tapot PrintPool _Script_
    _CallOut 9 0

    // separar las lineas
    call_tapot SplitStr _Script_ _ScriptLineSplit_ _LinesOfScript_

    // ir a la linea 0?
    (LET*)1 = 10
    call_tapot GetVar 1 1
    (LET*)2 = 1
    IF 1|==|2 THEN _ResetProgramCounter_
    IF 1|!=|2 THEN _PopPcM_

    // ejecutar las lineas
    call _ScriptExecutionLoop_

    __asm ret

FUNCTION _PopPcM_

    __asm ret

FUNCTION _ResetProgramCounter_
    _LineToExecute_ = 0
    __asm ret

FUNCTION _ScriptExecutionLoop_

    // obtener la linea
    call_tapot GetArrayItem _LinesOfScript_ _LineToExecute_ _Line_

    //call_tapot PrintPool _Line_
    //_CallOut 9 0

    call _ExCommand_

    //_CallOut 18 _LineToExecute_
    //Print "\n"

    call_tapot SafeFreeArray _Line_

    // incrementar la linea
    __asm increment _LineToExecute_

    // obtener la longitud del array
    call_tapot GetArrayLength _LinesOfScript_ 2

    // ver si no se acabaron las lineas
    call_tapot CmpAndJump _LineToExecute_ 2 _ComparatorType_IfNotGreater_ _ScriptExecutionLoop_ 0

    // ver si hay un script de regreso
    (LET*)7 = 11
    call_tapot GetVar 7 8

    // si no es nullptr ni su valor por que es siempre 0
    IF 8|!=|0 THEN _PopScript_

    __asm ret
FUNCTION _PopScript_
    // recuperarlo
    _LinesOfScript_ = *8
    // llevarla a 0
    call_tapot SetVar 7 0
    __asm ret